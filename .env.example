# ===========================================================================
# SERVER CONFIGURATION
# ===========================================================================

# PORT - The network port the WebSocket server will listen on
# - Default: 3000
# - Options: Any valid port number (1024-65535, with ports below 1024 requiring admin rights)
# - Note: If changed, update any client configurations pointing to this server
PORT=3000

# HOST - Controls which network interfaces the server listens on
# - 0.0.0.0: Listen on all interfaces (accessible from anywhere, default)
# - 127.0.0.1: Listen only on localhost (secure, accessible only from same machine)
# - Specific IP: Listen only on one network interface (e.g., 192.168.1.100)
# - Security note: Restricting to 127.0.0.1 provides additional network isolation
HOST=0.0.0.0

# ===========================================================================
# OLLAMA API CONFIGURATION
# ===========================================================================

# OLLAMA_API_URL - Connection URL for the Ollama API server
# - Default for standalone deployments: http://localhost:11434
# - Docker Compose override: http://ollama:11434 (internal container network)
# - Can point to remote Ollama instances for distributed deployments
# - Format: protocol://hostname:port
# - Note: For Docker deployment, this is typically overridden in docker-compose.yml
OLLAMA_API_URL=http://localhost:11434

# OLLAMA_DEFAULT_MODEL - The default model to use when not specified by client
# - Common options: llama2, mistral, gemma, phi, etc.
# - Must be a model name that exists on your Ollama instance
# - Clients can override this by explicitly specifying a model
# - Tip: Choose a model that balances quality and speed for your use case
OLLAMA_DEFAULT_MODEL=llama2

# ===========================================================================
# LOGGING CONFIGURATION
# ===========================================================================

# LOG_LEVEL - Controls verbosity of server logs
# - error: Only errors (minimal output)
# - warn: Warnings and errors
# - info: General information plus warnings/errors (recommended for production)
# - debug: Detailed information (useful for development, more verbose)
# - trace: Extremely detailed logs (very verbose, performance impact)
# - Note: Higher levels (debug/trace) may impact performance and create large log files
LOG_LEVEL=info

# ===========================================================================
# SECURITY CONFIGURATION
# ===========================================================================

# DATA_DIR - Directory where client data is stored
# - Default: ./data (relative to project root)
# - Should be a secure location with appropriate permissions
# - For Docker, this is mounted as a volume
DATA_DIR=./data

# AUTH_TIMEOUT_MS - Authentication timeout in milliseconds
# - Default: 30000 (30 seconds)
# - Clients must complete authentication within this time
AUTH_TIMEOUT_MS=30000

# MAX_AUTH_ATTEMPTS - Maximum failed authentication attempts before rate limiting
# - Default: 5
# - After this many failures, authentication will be temporarily blocked for that IP/client
MAX_AUTH_ATTEMPTS=5

# ===========================================================================
# ADVANCED CONFIGURATION
# ===========================================================================

# NODE_ENV - Node.js environment
# - development: Enables more verbose logging and warnings
# - production: Optimized for production use
# - Note: This affects various behaviors including error handling and logging
NODE_ENV=production
